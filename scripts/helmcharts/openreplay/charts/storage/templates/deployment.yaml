apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "storage.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "storage.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "storage.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "storage.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "storage.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.global.enterpriseEditionLicense }}
          image: "{{ tpl .Values.image.repository . }}:{{ .Values.image.tag | default .Chart.AppVersion }}-ee"
          {{- else }}
          image: "{{ tpl .Values.image.repository . }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.healthCheck}}
          {{- .Values.healthCheck | toYaml | nindent 10}}
          {{- end}}
          env:
            - name: AWS_ACCESS_KEY_ID
              value: {{ .Values.global.s3.accessKey }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .Values.global.s3.secretKey }}
            - name: AWS_ENDPOINT
              value: '{{ .Values.global.s3.endpoint }}'
            - name: AWS_REGION_WEB
              value: '{{ .Values.global.s3.region }}'
            - name: AWS_REGION_IOS
              value: '{{ .Values.global.s3.region }}'
            - name: S3_BUCKET_WEB
              value: {{ .Values.global.s3.recordingsBucket }}
            - name: S3_BUCKET_IOS
              value: {{ .Values.global.s3.recordingsBucket }}
            - name: LICENSE_KEY
              value: '{{ .Values.global.enterpriseEditionLicense }}'
            {{- if .Values.global.redis.existingSecret }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.existingSecret }}
                  key: redis-password
            {{- else if .Values.global.redis.redisPassword }}
            - name: REDIS_PASSWORD
              value: {{ .Values.global.redis.redisPassword }}
            {{- end}}
            - name: REDIS_STRING
              {{- if or .Values.global.redis.existingSecret .Values.global.redis.redisPassword }}
              value: '{{ ternary "rediss" "redis" .Values.global.redis.tls.enabled }}://{{ .Values.global.redis.redisUsername }}:$(REDIS_PASSWORD)@{{ .Values.global.redis.redisHost }}:{{ .Values.global.redis.redisPort }}'
              {{- else }}
              value: '{{ ternary "rediss" "redis" .Values.global.redis.tls.enabled }}://{{ .Values.global.redis.redisHost }}:{{ .Values.global.redis.redisPort }}'
              {{- end}}
            - name: KAFKA_SERVERS
              value: '{{ .Values.global.kafka.kafkaHost }}:{{ .Values.global.kafka.kafkaPort }}'
            - name: KAFKA_USE_SSL
              value: '{{ .Values.global.kafka.kafkaUseSsl }}'
            {{- range $key, $val := .Values.env }}
            - name: {{ $key }}
              value: '{{ $val }}'
            {{- end}}
          ports:
            {{- range $key, $val := .Values.service.ports }}
            - name: {{ $key }}
              containerPort: {{ $val }}
              protocol: TCP
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: datadir
            mountPath: /mnt/efs
          {{- with .Values.persistence.mounts  }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
      {{- if eq .Values.pvc.name "hostPath" }}
      volumes:
      {{- with .Values.persistence.volumes  }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
      - name: datadir
        hostPath:
          # Ensure the file directory is created.
          path: {{ .Values.pvc.hostMountPath }}
          type: DirectoryOrCreate
      {{- else }}
      volumes:
      {{- with .Values.persistence.volumes  }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      - name: datadir
        persistentVolumeClaim:
          claimName: {{ .Values.pvc.name }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
